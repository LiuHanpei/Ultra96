// ==============================================================
// Generated by Vitis HLS v2023.2.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module main_func_main_func_Pipeline_VITIS_LOOP_12_1_VITIS_LOOP_13_2_VITIS_LOOP_14_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bias_buf1x1_address0,
        bias_buf1x1_ce0,
        bias_buf1x1_q0,
        weight_buf1x1_0_address0,
        weight_buf1x1_0_ce0,
        weight_buf1x1_0_q0,
        weight_buf1x1_1_address0,
        weight_buf1x1_1_ce0,
        weight_buf1x1_1_q0,
        weight_buf1x1_2_address0,
        weight_buf1x1_2_ce0,
        weight_buf1x1_2_q0,
        outBuffer3x3_0_address0,
        outBuffer3x3_0_ce0,
        outBuffer3x3_0_q0,
        outBuffer3x3_1_address0,
        outBuffer3x3_1_ce0,
        outBuffer3x3_1_q0,
        outBuffer3x3_2_address0,
        outBuffer3x3_2_ce0,
        outBuffer3x3_2_q0,
        outBuffer1x1_address0,
        outBuffer1x1_ce0,
        outBuffer1x1_we0,
        outBuffer1x1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] bias_buf1x1_address0;
output   bias_buf1x1_ce0;
input  [15:0] bias_buf1x1_q0;
output  [5:0] weight_buf1x1_0_address0;
output   weight_buf1x1_0_ce0;
input  [15:0] weight_buf1x1_0_q0;
output  [5:0] weight_buf1x1_1_address0;
output   weight_buf1x1_1_ce0;
input  [15:0] weight_buf1x1_1_q0;
output  [5:0] weight_buf1x1_2_address0;
output   weight_buf1x1_2_ce0;
input  [15:0] weight_buf1x1_2_q0;
output  [11:0] outBuffer3x3_0_address0;
output   outBuffer3x3_0_ce0;
input  [15:0] outBuffer3x3_0_q0;
output  [11:0] outBuffer3x3_1_address0;
output   outBuffer3x3_1_ce0;
input  [15:0] outBuffer3x3_1_q0;
output  [11:0] outBuffer3x3_2_address0;
output   outBuffer3x3_2_ce0;
input  [15:0] outBuffer3x3_2_q0;
output  [17:0] outBuffer1x1_address0;
output   outBuffer1x1_ce0;
output   outBuffer1x1_we0;
output  [15:0] outBuffer1x1_d0;

reg ap_idle;
reg bias_buf1x1_ce0;
reg weight_buf1x1_0_ce0;
reg weight_buf1x1_1_ce0;
reg weight_buf1x1_2_ce0;
reg outBuffer3x3_0_ce0;
reg outBuffer3x3_1_ce0;
reg outBuffer3x3_2_ce0;
reg outBuffer1x1_ce0;
reg outBuffer1x1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln12_fu_238_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln12_fu_336_p1;
reg   [63:0] zext_ln12_reg_645;
reg   [63:0] zext_ln12_reg_645_pp0_iter2_reg;
reg   [63:0] zext_ln12_reg_645_pp0_iter3_reg;
reg   [63:0] zext_ln12_reg_645_pp0_iter4_reg;
wire   [17:0] add_ln19_4_fu_441_p2;
reg   [17:0] add_ln19_4_reg_657;
reg   [17:0] add_ln19_4_reg_657_pp0_iter2_reg;
reg   [17:0] add_ln19_4_reg_657_pp0_iter3_reg;
reg   [17:0] add_ln19_4_reg_657_pp0_iter4_reg;
reg   [17:0] add_ln19_4_reg_657_pp0_iter5_reg;
wire   [63:0] zext_ln17_1_fu_453_p1;
reg   [63:0] zext_ln17_1_reg_662;
reg   [63:0] zext_ln17_1_reg_662_pp0_iter2_reg;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln19_6_fu_568_p1;
reg   [6:0] w_fu_86;
wire   [6:0] add_ln14_fu_458_p2;
wire    ap_loop_init;
reg   [5:0] h_fu_90;
wire   [5:0] select_ln13_1_fu_328_p3;
reg   [12:0] indvar_flatten66_fu_94;
wire   [12:0] select_ln13_2_fu_470_p3;
reg   [5:0] co_fu_98;
wire   [5:0] select_ln12_1_fu_300_p3;
reg   [17:0] indvar_flatten79_fu_102;
wire   [17:0] add_ln12_1_fu_244_p2;
wire   [0:0] icmp_ln13_fu_268_p2;
wire   [0:0] icmp_ln14_fu_288_p2;
wire   [0:0] xor_ln12_fu_282_p2;
wire   [5:0] add_ln12_fu_262_p2;
wire   [5:0] select_ln12_fu_274_p3;
wire   [0:0] and_ln12_fu_294_p2;
wire   [0:0] or_ln13_fu_314_p2;
wire   [5:0] add_ln13_fu_308_p2;
wire   [10:0] tmp_s_fu_341_p3;
wire   [8:0] tmp_69_fu_353_p3;
wire   [11:0] zext_ln19_fu_349_p1;
wire   [11:0] zext_ln19_1_fu_361_p1;
wire   [11:0] add_ln19_fu_365_p2;
wire   [11:0] zext_ln19_2_fu_371_p1;
wire   [11:0] add_ln19_2_fu_375_p2;
wire   [15:0] tmp_63_fu_389_p3;
wire   [17:0] tmp_fu_381_p3;
wire   [17:0] zext_ln19_3_fu_397_p1;
wire   [9:0] tmp_71_fu_415_p3;
wire   [11:0] tmp_70_fu_407_p3;
wire   [11:0] zext_ln17_fu_423_p1;
wire   [6:0] select_ln13_fu_320_p3;
wire   [17:0] add_ln19_3_fu_401_p2;
wire   [17:0] zext_ln19_5_fu_437_p1;
wire   [11:0] add_ln17_fu_427_p2;
wire   [11:0] zext_ln19_4_fu_433_p1;
wire   [11:0] add_ln17_3_fu_447_p2;
wire   [12:0] add_ln13_1_fu_464_p2;
wire   [28:0] mul_ln17_fu_527_p2;
wire   [15:0] tmp_72_fu_533_p4;
wire  signed [28:0] tmp_73_fu_551_p1;
wire   [28:0] grp_fu_588_p3;
wire   [15:0] tmp_73_fu_551_p4;
wire  signed [28:0] sum_fu_572_p1;
wire   [28:0] grp_fu_597_p3;
wire   [15:0] sum_fu_572_p4;
wire   [28:0] grp_fu_588_p2;
wire   [28:0] grp_fu_597_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 w_fu_86 = 7'd0;
#0 h_fu_90 = 6'd0;
#0 indvar_flatten66_fu_94 = 13'd0;
#0 co_fu_98 = 6'd0;
#0 indvar_flatten79_fu_102 = 18'd0;
#0 ap_done_reg = 1'b0;
end

main_func_mul_16s_16s_29_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
mul_16s_16s_29_1_1_U158(
    .din0(outBuffer3x3_0_q0),
    .din1(weight_buf1x1_0_q0),
    .dout(mul_ln17_fu_527_p2)
);

main_func_mac_muladd_16s_16s_29ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_16s_29ns_29_4_1_U159(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(outBuffer3x3_1_q0),
    .din1(weight_buf1x1_1_q0),
    .din2(grp_fu_588_p2),
    .ce(1'b1),
    .dout(grp_fu_588_p3)
);

main_func_mac_muladd_16s_16s_29ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_16s_29ns_29_4_1_U160(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(outBuffer3x3_2_q0),
    .din1(weight_buf1x1_2_q0),
    .din2(grp_fu_597_p2),
    .ce(1'b1),
    .dout(grp_fu_597_p3)
);

main_func_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            co_fu_98 <= 6'd0;
        end else if (((icmp_ln12_fu_238_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            co_fu_98 <= select_ln12_1_fu_300_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            h_fu_90 <= 6'd0;
        end else if (((icmp_ln12_fu_238_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            h_fu_90 <= select_ln13_1_fu_328_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten66_fu_94 <= 13'd0;
        end else if (((icmp_ln12_fu_238_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten66_fu_94 <= select_ln13_2_fu_470_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten79_fu_102 <= 18'd0;
        end else if (((icmp_ln12_fu_238_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten79_fu_102 <= add_ln12_1_fu_244_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            w_fu_86 <= 7'd0;
        end else if (((icmp_ln12_fu_238_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            w_fu_86 <= add_ln14_fu_458_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln19_4_reg_657 <= add_ln19_4_fu_441_p2;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        zext_ln12_reg_645[5 : 0] <= zext_ln12_fu_336_p1[5 : 0];
        zext_ln17_1_reg_662[11 : 0] <= zext_ln17_1_fu_453_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln19_4_reg_657_pp0_iter2_reg <= add_ln19_4_reg_657;
        add_ln19_4_reg_657_pp0_iter3_reg <= add_ln19_4_reg_657_pp0_iter2_reg;
        add_ln19_4_reg_657_pp0_iter4_reg <= add_ln19_4_reg_657_pp0_iter3_reg;
        add_ln19_4_reg_657_pp0_iter5_reg <= add_ln19_4_reg_657_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        zext_ln12_reg_645_pp0_iter2_reg[5 : 0] <= zext_ln12_reg_645[5 : 0];
        zext_ln12_reg_645_pp0_iter3_reg[5 : 0] <= zext_ln12_reg_645_pp0_iter2_reg[5 : 0];
        zext_ln12_reg_645_pp0_iter4_reg[5 : 0] <= zext_ln12_reg_645_pp0_iter3_reg[5 : 0];
        zext_ln17_1_reg_662_pp0_iter2_reg[11 : 0] <= zext_ln17_1_reg_662[11 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_238_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        bias_buf1x1_ce0 = 1'b1;
    end else begin
        bias_buf1x1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        outBuffer1x1_ce0 = 1'b1;
    end else begin
        outBuffer1x1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        outBuffer1x1_we0 = 1'b1;
    end else begin
        outBuffer1x1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outBuffer3x3_0_ce0 = 1'b1;
    end else begin
        outBuffer3x3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outBuffer3x3_1_ce0 = 1'b1;
    end else begin
        outBuffer3x3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outBuffer3x3_2_ce0 = 1'b1;
    end else begin
        outBuffer3x3_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        weight_buf1x1_0_ce0 = 1'b1;
    end else begin
        weight_buf1x1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_buf1x1_1_ce0 = 1'b1;
    end else begin
        weight_buf1x1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf1x1_2_ce0 = 1'b1;
    end else begin
        weight_buf1x1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_1_fu_244_p2 = (indvar_flatten79_fu_102 + 18'd1);

assign add_ln12_fu_262_p2 = (co_fu_98 + 6'd1);

assign add_ln13_1_fu_464_p2 = (indvar_flatten66_fu_94 + 13'd1);

assign add_ln13_fu_308_p2 = (select_ln12_fu_274_p3 + 6'd1);

assign add_ln14_fu_458_p2 = (select_ln13_fu_320_p3 + 7'd1);

assign add_ln17_3_fu_447_p2 = (add_ln17_fu_427_p2 + zext_ln19_4_fu_433_p1);

assign add_ln17_fu_427_p2 = (tmp_70_fu_407_p3 + zext_ln17_fu_423_p1);

assign add_ln19_2_fu_375_p2 = (add_ln19_fu_365_p2 + zext_ln19_2_fu_371_p1);

assign add_ln19_3_fu_401_p2 = (tmp_fu_381_p3 + zext_ln19_3_fu_397_p1);

assign add_ln19_4_fu_441_p2 = (add_ln19_3_fu_401_p2 + zext_ln19_5_fu_437_p1);

assign add_ln19_fu_365_p2 = (zext_ln19_fu_349_p1 + zext_ln19_1_fu_361_p1);

assign and_ln12_fu_294_p2 = (xor_ln12_fu_282_p2 & icmp_ln14_fu_288_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign bias_buf1x1_address0 = zext_ln12_reg_645_pp0_iter4_reg;

assign grp_fu_588_p2 = {{tmp_72_fu_533_p4}, {13'd0}};

assign grp_fu_597_p2 = {{tmp_73_fu_551_p4}, {13'd0}};

assign icmp_ln12_fu_238_p2 = ((indvar_flatten79_fu_102 == 18'd153600) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_268_p2 = ((indvar_flatten66_fu_94 == 13'd3200) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_288_p2 = ((w_fu_86 == 7'd80) ? 1'b1 : 1'b0);

assign or_ln13_fu_314_p2 = (icmp_ln13_fu_268_p2 | and_ln12_fu_294_p2);

assign outBuffer1x1_address0 = zext_ln19_6_fu_568_p1;

assign outBuffer1x1_d0 = (bias_buf1x1_q0 + sum_fu_572_p4);

assign outBuffer3x3_0_address0 = zext_ln17_1_reg_662_pp0_iter2_reg;

assign outBuffer3x3_1_address0 = zext_ln17_1_fu_453_p1;

assign outBuffer3x3_2_address0 = zext_ln17_1_reg_662;

assign select_ln12_1_fu_300_p3 = ((icmp_ln13_fu_268_p2[0:0] == 1'b1) ? add_ln12_fu_262_p2 : co_fu_98);

assign select_ln12_fu_274_p3 = ((icmp_ln13_fu_268_p2[0:0] == 1'b1) ? 6'd0 : h_fu_90);

assign select_ln13_1_fu_328_p3 = ((and_ln12_fu_294_p2[0:0] == 1'b1) ? add_ln13_fu_308_p2 : select_ln12_fu_274_p3);

assign select_ln13_2_fu_470_p3 = ((icmp_ln13_fu_268_p2[0:0] == 1'b1) ? 13'd1 : add_ln13_1_fu_464_p2);

assign select_ln13_fu_320_p3 = ((or_ln13_fu_314_p2[0:0] == 1'b1) ? 7'd0 : w_fu_86);

assign sum_fu_572_p1 = grp_fu_597_p3;

assign sum_fu_572_p4 = {{sum_fu_572_p1[28:13]}};

assign tmp_63_fu_389_p3 = {{add_ln19_2_fu_375_p2}, {4'd0}};

assign tmp_69_fu_353_p3 = {{select_ln12_1_fu_300_p3}, {3'd0}};

assign tmp_70_fu_407_p3 = {{select_ln13_1_fu_328_p3}, {6'd0}};

assign tmp_71_fu_415_p3 = {{select_ln13_1_fu_328_p3}, {4'd0}};

assign tmp_72_fu_533_p4 = {{mul_ln17_fu_527_p2[28:13]}};

assign tmp_73_fu_551_p1 = grp_fu_588_p3;

assign tmp_73_fu_551_p4 = {{tmp_73_fu_551_p1[28:13]}};

assign tmp_fu_381_p3 = {{add_ln19_2_fu_375_p2}, {6'd0}};

assign tmp_s_fu_341_p3 = {{select_ln12_1_fu_300_p3}, {5'd0}};

assign weight_buf1x1_0_address0 = zext_ln12_reg_645_pp0_iter2_reg;

assign weight_buf1x1_1_address0 = zext_ln12_fu_336_p1;

assign weight_buf1x1_2_address0 = zext_ln12_reg_645;

assign xor_ln12_fu_282_p2 = (icmp_ln13_fu_268_p2 ^ 1'd1);

assign zext_ln12_fu_336_p1 = select_ln12_1_fu_300_p3;

assign zext_ln17_1_fu_453_p1 = add_ln17_3_fu_447_p2;

assign zext_ln17_fu_423_p1 = tmp_71_fu_415_p3;

assign zext_ln19_1_fu_361_p1 = tmp_69_fu_353_p3;

assign zext_ln19_2_fu_371_p1 = select_ln13_1_fu_328_p3;

assign zext_ln19_3_fu_397_p1 = tmp_63_fu_389_p3;

assign zext_ln19_4_fu_433_p1 = select_ln13_fu_320_p3;

assign zext_ln19_5_fu_437_p1 = select_ln13_fu_320_p3;

assign zext_ln19_6_fu_568_p1 = add_ln19_4_reg_657_pp0_iter5_reg;

assign zext_ln19_fu_349_p1 = tmp_s_fu_341_p3;

always @ (posedge ap_clk) begin
    zext_ln12_reg_645[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln12_reg_645_pp0_iter2_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln12_reg_645_pp0_iter3_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln12_reg_645_pp0_iter4_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln17_1_reg_662[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln17_1_reg_662_pp0_iter2_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //main_func_main_func_Pipeline_VITIS_LOOP_12_1_VITIS_LOOP_13_2_VITIS_LOOP_14_3
