-- ==============================================================
-- Generated by Vitis HLS v2023.2.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_func_main_func_Pipeline_VITIS_LOOP_66_1_VITIS_LOOP_67_2_VITIS_LOOP_68_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_fm_AWVALID : OUT STD_LOGIC;
    m_axi_fm_AWREADY : IN STD_LOGIC;
    m_axi_fm_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fm_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fm_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_WVALID : OUT STD_LOGIC;
    m_axi_fm_WREADY : IN STD_LOGIC;
    m_axi_fm_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_fm_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_WLAST : OUT STD_LOGIC;
    m_axi_fm_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_ARVALID : OUT STD_LOGIC;
    m_axi_fm_ARREADY : IN STD_LOGIC;
    m_axi_fm_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fm_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fm_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RVALID : IN STD_LOGIC;
    m_axi_fm_RREADY : OUT STD_LOGIC;
    m_axi_fm_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_fm_RLAST : IN STD_LOGIC;
    m_axi_fm_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_fm_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_BVALID : IN STD_LOGIC;
    m_axi_fm_BREADY : OUT STD_LOGIC;
    m_axi_fm_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    zext_ln62_1 : IN STD_LOGIC_VECTOR (16 downto 0);
    empty : IN STD_LOGIC_VECTOR (1 downto 0);
    output_feature_map : IN STD_LOGIC_VECTOR (63 downto 0);
    outBuffer1x1_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    outBuffer1x1_ce0 : OUT STD_LOGIC;
    outBuffer1x1_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of main_func_main_func_Pipeline_VITIS_LOOP_66_1_VITIS_LOOP_67_2_VITIS_LOOP_68_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv18_25800 : STD_LOGIC_VECTOR (17 downto 0) := "100101100000000000";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv13_C80 : STD_LOGIC_VECTOR (12 downto 0) := "0110010000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv22_C800 : STD_LOGIC_VECTOR (21 downto 0) := "0000001100100000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal or_ln67_reg_646 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_io : BOOLEAN;
    signal icmp_ln68_1_reg_661 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_reg_661_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln66_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal fm_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal fm_blk_n_W : STD_LOGIC;
    signal fm_blk_n_AW : STD_LOGIC;
    signal first_iter_7_reg_187 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln62_1_cast_fu_200_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln62_1_cast_reg_618 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln66_reg_623 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_623_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_623_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_623_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_reg_627 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_reg_627_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_reg_627_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_1_fu_262_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln66_1_reg_635 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln66_1_reg_635_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln66_1_reg_635_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln67_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fm_addr_reg_650 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln68_1_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_reg_661_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_reg_661_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_reg_661_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_reg_661_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_reg_661_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal outBuffer1x1_load_reg_665 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_exit_pp0_iter4_stage0 : STD_LOGIC;
    signal ap_phi_mux_first_iter_7_phi_fu_192_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal zext_ln70_5_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln68_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal w_fu_120 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln68_fu_542_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_fu_124 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln67_1_fu_363_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten86_fu_128 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal select_ln67_2_fu_280_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal c_fu_132 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal indvar_flatten99_fu_136 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal add_ln66_1_fu_241_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln66_fu_250_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln67_1_fu_274_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln68_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln66_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_fu_309_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln66_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln66_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln67_1_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln67_fu_338_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_564_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_s_fu_371_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_2_fu_390_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_fu_402_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast17_fu_398_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_1_fu_380_p5 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp7_fu_414_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_cast18_fu_410_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal empty_33_fu_420_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_4_fu_426_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_cast32_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_34_fu_438_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln9_fu_443_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_5_fu_463_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_474_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln70_fu_470_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln70_1_fu_481_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln70_fu_485_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln70_2_fu_491_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln70_1_fu_495_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_fu_509_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_501_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln70_3_fu_517_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln67_fu_355_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln70_2_fu_521_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln70_4_fu_527_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln70_3_fu_531_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_564_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_564_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_564_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_564_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_564_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component main_func_mac_muladd_6ns_16ns_17ns_22_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component main_func_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_6ns_16ns_17ns_22_4_1_U170 : component main_func_mac_muladd_6ns_16ns_17ns_22_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        din2_WIDTH => 17,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_564_p0,
        din1 => grp_fu_564_p1,
        din2 => grp_fu_564_p2,
        ce => grp_fu_564_ce,
        dout => grp_fu_564_p3);

    flow_control_loop_pipe_sequential_init_U : component main_func_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    c_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_132 <= ap_const_lv6_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln66_fu_235_p2 = ap_const_lv1_0))) then 
                    c_fu_132 <= select_ln66_1_fu_262_p3;
                end if;
            end if; 
        end if;
    end process;

    first_iter_7_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                first_iter_7_reg_187 <= ap_const_lv1_1;
            elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln66_reg_623_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                first_iter_7_reg_187 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    h_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    h_fu_124 <= ap_const_lv6_0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln66_reg_623_pp0_iter3_reg = ap_const_lv1_0))) then 
                    h_fu_124 <= select_ln67_1_fu_363_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten86_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten86_fu_128 <= ap_const_lv13_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln66_fu_235_p2 = ap_const_lv1_0))) then 
                    indvar_flatten86_fu_128 <= select_ln67_2_fu_280_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten99_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten99_fu_136 <= ap_const_lv18_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln66_fu_235_p2 = ap_const_lv1_0))) then 
                    indvar_flatten99_fu_136 <= add_ln66_1_fu_241_p2;
                end if;
            end if; 
        end if;
    end process;

    w_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    w_fu_120 <= ap_const_lv7_0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln66_reg_623_pp0_iter3_reg = ap_const_lv1_0))) then 
                    w_fu_120 <= add_ln68_fu_542_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                fm_addr_reg_650 <= sext_ln68_fu_453_p1;
                icmp_ln66_reg_623_pp0_iter2_reg <= icmp_ln66_reg_623;
                icmp_ln66_reg_623_pp0_iter3_reg <= icmp_ln66_reg_623_pp0_iter2_reg;
                icmp_ln66_reg_623_pp0_iter4_reg <= icmp_ln66_reg_623_pp0_iter3_reg;
                icmp_ln67_reg_627_pp0_iter2_reg <= icmp_ln67_reg_627;
                icmp_ln67_reg_627_pp0_iter3_reg <= icmp_ln67_reg_627_pp0_iter2_reg;
                icmp_ln68_1_reg_661 <= icmp_ln68_1_fu_548_p2;
                icmp_ln68_1_reg_661_pp0_iter10_reg <= icmp_ln68_1_reg_661_pp0_iter9_reg;
                icmp_ln68_1_reg_661_pp0_iter5_reg <= icmp_ln68_1_reg_661;
                icmp_ln68_1_reg_661_pp0_iter6_reg <= icmp_ln68_1_reg_661_pp0_iter5_reg;
                icmp_ln68_1_reg_661_pp0_iter7_reg <= icmp_ln68_1_reg_661_pp0_iter6_reg;
                icmp_ln68_1_reg_661_pp0_iter8_reg <= icmp_ln68_1_reg_661_pp0_iter7_reg;
                icmp_ln68_1_reg_661_pp0_iter9_reg <= icmp_ln68_1_reg_661_pp0_iter8_reg;
                or_ln67_reg_646 <= or_ln67_fu_344_p2;
                outBuffer1x1_load_reg_665 <= outBuffer1x1_q0;
                select_ln66_1_reg_635_pp0_iter2_reg <= select_ln66_1_reg_635;
                select_ln66_1_reg_635_pp0_iter3_reg <= select_ln66_1_reg_635_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln66_reg_623 <= icmp_ln66_fu_235_p2;
                icmp_ln67_reg_627 <= icmp_ln67_fu_256_p2;
                select_ln66_1_reg_635 <= select_ln66_1_fu_262_p3;
                    zext_ln62_1_cast_reg_618(16 downto 0) <= zext_ln62_1_cast_fu_200_p1(16 downto 0);
            end if;
        end if;
    end process;
    zext_ln62_1_cast_reg_618(21 downto 17) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln66_1_fu_241_p2 <= std_logic_vector(unsigned(indvar_flatten99_fu_136) + unsigned(ap_const_lv18_1));
    add_ln66_fu_250_p2 <= std_logic_vector(unsigned(c_fu_132) + unsigned(ap_const_lv6_1));
    add_ln67_1_fu_274_p2 <= std_logic_vector(unsigned(indvar_flatten86_fu_128) + unsigned(ap_const_lv13_1));
    add_ln67_fu_338_p2 <= std_logic_vector(unsigned(select_ln66_fu_309_p3) + unsigned(ap_const_lv6_1));
    add_ln68_fu_542_p2 <= std_logic_vector(unsigned(select_ln67_fu_355_p3) + unsigned(ap_const_lv7_1));
    add_ln70_1_fu_495_p2 <= std_logic_vector(unsigned(add_ln70_fu_485_p2) + unsigned(zext_ln70_2_fu_491_p1));
    add_ln70_2_fu_521_p2 <= std_logic_vector(unsigned(tmp_7_fu_501_p3) + unsigned(zext_ln70_3_fu_517_p1));
    add_ln70_3_fu_531_p2 <= std_logic_vector(unsigned(add_ln70_2_fu_521_p2) + unsigned(zext_ln70_4_fu_527_p1));
    add_ln70_fu_485_p2 <= std_logic_vector(unsigned(zext_ln70_fu_470_p1) + unsigned(zext_ln70_1_fu_481_p1));
    and_ln66_fu_332_p2 <= (xor_ln66_fu_321_p2 and icmp_ln68_fu_326_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_state12_pp0_stage0_iter11)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state12_pp0_stage0_iter11));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter11, m_axi_fm_WREADY, ap_block_state6_io, ap_block_state12_pp0_stage0_iter11)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state12_pp0_stage0_iter11)) or ((m_axi_fm_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter11, m_axi_fm_WREADY, ap_block_state6_io, ap_block_state12_pp0_stage0_iter11)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state12_pp0_stage0_iter11)) or ((m_axi_fm_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io)));
    end process;


    ap_block_state12_pp0_stage0_iter11_assign_proc : process(m_axi_fm_BVALID, icmp_ln68_1_reg_661_pp0_iter10_reg)
    begin
                ap_block_state12_pp0_stage0_iter11 <= ((icmp_ln68_1_reg_661_pp0_iter10_reg = ap_const_lv1_1) and (m_axi_fm_BVALID = ap_const_logic_0));
    end process;


    ap_block_state6_io_assign_proc : process(m_axi_fm_AWREADY, or_ln67_reg_646)
    begin
                ap_block_state6_io <= ((m_axi_fm_AWREADY = ap_const_logic_0) and (or_ln67_reg_646 = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln66_fu_235_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln66_fu_235_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter4_stage0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone, icmp_ln66_reg_623_pp0_iter3_reg)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln66_reg_623_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_first_iter_7_phi_fu_192_p4_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0, first_iter_7_reg_187, icmp_ln66_reg_623_pp0_iter4_reg)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln66_reg_623_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_first_iter_7_phi_fu_192_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_first_iter_7_phi_fu_192_p4 <= first_iter_7_reg_187;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_33_fu_420_p2 <= std_logic_vector(unsigned(tmp7_fu_414_p2) + unsigned(p_cast18_fu_410_p1));
    empty_34_fu_438_p2 <= std_logic_vector(unsigned(p_cast32_fu_434_p1) + unsigned(output_feature_map));

    fm_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter5, m_axi_fm_AWREADY, or_ln67_reg_646, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln67_reg_646 = ap_const_lv1_1))) then 
            fm_blk_n_AW <= m_axi_fm_AWREADY;
        else 
            fm_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    fm_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter11, m_axi_fm_BVALID, icmp_ln68_1_reg_661_pp0_iter10_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln68_1_reg_661_pp0_iter10_reg = ap_const_lv1_1))) then 
            fm_blk_n_B <= m_axi_fm_BVALID;
        else 
            fm_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    fm_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter6, m_axi_fm_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            fm_blk_n_W <= m_axi_fm_WREADY;
        else 
            fm_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_564_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_564_ce <= ap_const_logic_1;
        else 
            grp_fu_564_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_564_p0 <= grp_fu_564_p00(6 - 1 downto 0);
    grp_fu_564_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln66_1_fu_262_p3),22));
    grp_fu_564_p1 <= ap_const_lv22_C800(16 - 1 downto 0);
    grp_fu_564_p2 <= zext_ln62_1_cast_reg_618(17 - 1 downto 0);
    icmp_ln66_fu_235_p2 <= "1" when (indvar_flatten99_fu_136 = ap_const_lv18_25800) else "0";
    icmp_ln67_fu_256_p2 <= "1" when (indvar_flatten86_fu_128 = ap_const_lv13_C80) else "0";
    icmp_ln68_1_fu_548_p2 <= "1" when (add_ln68_fu_542_p2 = ap_const_lv7_50) else "0";
    icmp_ln68_fu_326_p2 <= "1" when (w_fu_120 = ap_const_lv7_50) else "0";
    m_axi_fm_ARADDR <= ap_const_lv64_0;
    m_axi_fm_ARBURST <= ap_const_lv2_0;
    m_axi_fm_ARCACHE <= ap_const_lv4_0;
    m_axi_fm_ARID <= ap_const_lv1_0;
    m_axi_fm_ARLEN <= ap_const_lv32_0;
    m_axi_fm_ARLOCK <= ap_const_lv2_0;
    m_axi_fm_ARPROT <= ap_const_lv3_0;
    m_axi_fm_ARQOS <= ap_const_lv4_0;
    m_axi_fm_ARREGION <= ap_const_lv4_0;
    m_axi_fm_ARSIZE <= ap_const_lv3_0;
    m_axi_fm_ARUSER <= ap_const_lv1_0;
    m_axi_fm_ARVALID <= ap_const_logic_0;
    m_axi_fm_AWADDR <= fm_addr_reg_650;
    m_axi_fm_AWBURST <= ap_const_lv2_0;
    m_axi_fm_AWCACHE <= ap_const_lv4_0;
    m_axi_fm_AWID <= ap_const_lv1_0;
    m_axi_fm_AWLEN <= ap_const_lv32_50;
    m_axi_fm_AWLOCK <= ap_const_lv2_0;
    m_axi_fm_AWPROT <= ap_const_lv3_0;
    m_axi_fm_AWQOS <= ap_const_lv4_0;
    m_axi_fm_AWREGION <= ap_const_lv4_0;
    m_axi_fm_AWSIZE <= ap_const_lv3_0;
    m_axi_fm_AWUSER <= ap_const_lv1_0;

    m_axi_fm_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter5, or_ln67_reg_646, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln67_reg_646 = ap_const_lv1_1))) then 
            m_axi_fm_AWVALID <= ap_const_logic_1;
        else 
            m_axi_fm_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_fm_BREADY_assign_proc : process(ap_enable_reg_pp0_iter11, icmp_ln68_1_reg_661_pp0_iter10_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln68_1_reg_661_pp0_iter10_reg = ap_const_lv1_1))) then 
            m_axi_fm_BREADY <= ap_const_logic_1;
        else 
            m_axi_fm_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fm_RREADY <= ap_const_logic_0;
    m_axi_fm_WDATA <= outBuffer1x1_load_reg_665;
    m_axi_fm_WID <= ap_const_lv1_0;
    m_axi_fm_WLAST <= ap_const_logic_0;
    m_axi_fm_WSTRB <= ap_const_lv2_3;
    m_axi_fm_WUSER <= ap_const_lv1_0;

    m_axi_fm_WVALID_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_fm_WVALID <= ap_const_logic_1;
        else 
            m_axi_fm_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln66_fu_316_p2 <= (icmp_ln67_reg_627_pp0_iter3_reg or ap_phi_mux_first_iter_7_phi_fu_192_p4);
    or_ln67_1_fu_350_p2 <= (icmp_ln67_reg_627_pp0_iter3_reg or and_ln66_fu_332_p2);
    or_ln67_fu_344_p2 <= (or_ln66_fu_316_p2 or and_ln66_fu_332_p2);
    outBuffer1x1_address0 <= zext_ln70_5_fu_537_p1(18 - 1 downto 0);

    outBuffer1x1_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            outBuffer1x1_ce0 <= ap_const_logic_1;
        else 
            outBuffer1x1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast17_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_390_p3),22));
    p_cast18_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_402_p3),22));
    p_cast32_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_426_p3),64));
    select_ln66_1_fu_262_p3 <= 
        add_ln66_fu_250_p2 when (icmp_ln67_fu_256_p2(0) = '1') else 
        c_fu_132;
    select_ln66_fu_309_p3 <= 
        ap_const_lv6_0 when (icmp_ln67_reg_627_pp0_iter3_reg(0) = '1') else 
        h_fu_124;
    select_ln67_1_fu_363_p3 <= 
        add_ln67_fu_338_p2 when (and_ln66_fu_332_p2(0) = '1') else 
        select_ln66_fu_309_p3;
    select_ln67_2_fu_280_p3 <= 
        ap_const_lv13_1 when (icmp_ln67_fu_256_p2(0) = '1') else 
        add_ln67_1_fu_274_p2;
    select_ln67_fu_355_p3 <= 
        ap_const_lv7_0 when (or_ln67_1_fu_350_p2(0) = '1') else 
        w_fu_120;
        sext_ln68_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln9_fu_443_p4),64));

    tmp7_fu_414_p2 <= std_logic_vector(unsigned(p_cast17_fu_398_p1) + unsigned(tmp_1_fu_380_p5));
    tmp_1_fu_380_p5 <= (((tmp_s_fu_371_p4 & empty) & empty) & ap_const_lv4_0);
    tmp_2_fu_390_p3 <= (select_ln67_1_fu_363_p3 & ap_const_lv6_0);
    tmp_3_fu_402_p3 <= (select_ln67_1_fu_363_p3 & ap_const_lv8_0);
    tmp_4_fu_426_p3 <= (empty_33_fu_420_p2 & ap_const_lv1_0);
    tmp_5_fu_463_p3 <= (select_ln66_1_reg_635_pp0_iter3_reg & ap_const_lv5_0);
    tmp_6_fu_474_p3 <= (select_ln66_1_reg_635_pp0_iter3_reg & ap_const_lv3_0);
    tmp_7_fu_501_p3 <= (add_ln70_1_fu_495_p2 & ap_const_lv6_0);
    tmp_8_fu_509_p3 <= (add_ln70_1_fu_495_p2 & ap_const_lv4_0);
    tmp_s_fu_371_p4 <= grp_fu_564_p3(21 downto 8);
    trunc_ln9_fu_443_p4 <= empty_34_fu_438_p2(63 downto 1);
    xor_ln66_fu_321_p2 <= (icmp_ln67_reg_627_pp0_iter3_reg xor ap_const_lv1_1);
    zext_ln62_1_cast_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln62_1),22));
    zext_ln70_1_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_474_p3),12));
    zext_ln70_2_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln67_1_fu_363_p3),12));
    zext_ln70_3_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_509_p3),18));
    zext_ln70_4_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln67_fu_355_p3),18));
    zext_ln70_5_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_3_fu_531_p2),64));
    zext_ln70_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_463_p3),12));
end behav;
