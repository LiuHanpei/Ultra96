-- ==============================================================
-- Generated by Vitis HLS v2023.2.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_func_main_func_Pipeline_VITIS_LOOP_12_1_VITIS_LOOP_13_2_VITIS_LOOP_14_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bias_buf1x1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_buf1x1_ce0 : OUT STD_LOGIC;
    bias_buf1x1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    weight_buf1x1_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    weight_buf1x1_0_ce0 : OUT STD_LOGIC;
    weight_buf1x1_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    weight_buf1x1_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    weight_buf1x1_1_ce0 : OUT STD_LOGIC;
    weight_buf1x1_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    weight_buf1x1_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    weight_buf1x1_2_ce0 : OUT STD_LOGIC;
    weight_buf1x1_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    outBuffer3x3_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    outBuffer3x3_0_ce0 : OUT STD_LOGIC;
    outBuffer3x3_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    outBuffer3x3_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    outBuffer3x3_1_ce0 : OUT STD_LOGIC;
    outBuffer3x3_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    outBuffer3x3_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    outBuffer3x3_2_ce0 : OUT STD_LOGIC;
    outBuffer3x3_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    outBuffer1x1_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    outBuffer1x1_ce0 : OUT STD_LOGIC;
    outBuffer1x1_we0 : OUT STD_LOGIC;
    outBuffer1x1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of main_func_main_func_Pipeline_VITIS_LOOP_12_1_VITIS_LOOP_13_2_VITIS_LOOP_14_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv18_25800 : STD_LOGIC_VECTOR (17 downto 0) := "100101100000000000";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv13_C80 : STD_LOGIC_VECTOR (12 downto 0) := "0110010000000";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln12_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln12_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_645 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_645_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_645_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_645_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_4_fu_441_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln19_4_reg_657 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln19_4_reg_657_pp0_iter2_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln19_4_reg_657_pp0_iter3_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln19_4_reg_657_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln19_4_reg_657_pp0_iter5_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln17_1_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_1_reg_662 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_1_reg_662_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln19_6_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_fu_86 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln14_fu_458_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal h_fu_90 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln13_1_fu_328_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten66_fu_94 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal select_ln13_2_fu_470_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal co_fu_98 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln12_1_fu_300_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten79_fu_102 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal add_ln12_1_fu_244_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln13_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln12_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln12_fu_262_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln12_fu_274_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln12_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln13_fu_308_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_341_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_69_fu_353_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln19_fu_349_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln19_1_fu_361_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln19_fu_365_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln19_2_fu_371_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln19_2_fu_375_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_63_fu_389_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_381_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln19_3_fu_397_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_71_fu_415_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_70_fu_407_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln17_fu_423_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln13_fu_320_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln19_3_fu_401_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln19_5_fu_437_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln17_fu_427_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln19_4_fu_433_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln17_3_fu_447_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln13_1_fu_464_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln17_fu_527_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_72_fu_533_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_73_fu_551_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_588_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_73_fu_551_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_572_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_597_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sum_fu_572_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_588_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_597_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component main_func_mul_16s_16s_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component main_func_mac_muladd_16s_16s_29ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component main_func_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_16s_16s_29_1_1_U158 : component main_func_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => outBuffer3x3_0_q0,
        din1 => weight_buf1x1_0_q0,
        dout => mul_ln17_fu_527_p2);

    mac_muladd_16s_16s_29ns_29_4_1_U159 : component main_func_mac_muladd_16s_16s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => outBuffer3x3_1_q0,
        din1 => weight_buf1x1_1_q0,
        din2 => grp_fu_588_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_588_p3);

    mac_muladd_16s_16s_29ns_29_4_1_U160 : component main_func_mac_muladd_16s_16s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => outBuffer3x3_2_q0,
        din1 => weight_buf1x1_2_q0,
        din2 => grp_fu_597_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_597_p3);

    flow_control_loop_pipe_sequential_init_U : component main_func_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    co_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    co_fu_98 <= ap_const_lv6_0;
                elsif (((icmp_ln12_fu_238_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    co_fu_98 <= select_ln12_1_fu_300_p3;
                end if;
            end if; 
        end if;
    end process;

    h_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    h_fu_90 <= ap_const_lv6_0;
                elsif (((icmp_ln12_fu_238_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    h_fu_90 <= select_ln13_1_fu_328_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten66_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten66_fu_94 <= ap_const_lv13_0;
                elsif (((icmp_ln12_fu_238_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten66_fu_94 <= select_ln13_2_fu_470_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten79_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten79_fu_102 <= ap_const_lv18_0;
                elsif (((icmp_ln12_fu_238_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten79_fu_102 <= add_ln12_1_fu_244_p2;
                end if;
            end if; 
        end if;
    end process;

    w_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    w_fu_86 <= ap_const_lv7_0;
                elsif (((icmp_ln12_fu_238_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    w_fu_86 <= add_ln14_fu_458_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln19_4_reg_657 <= add_ln19_4_fu_441_p2;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                    zext_ln12_reg_645(5 downto 0) <= zext_ln12_fu_336_p1(5 downto 0);
                    zext_ln17_1_reg_662(11 downto 0) <= zext_ln17_1_fu_453_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln19_4_reg_657_pp0_iter2_reg <= add_ln19_4_reg_657;
                add_ln19_4_reg_657_pp0_iter3_reg <= add_ln19_4_reg_657_pp0_iter2_reg;
                add_ln19_4_reg_657_pp0_iter4_reg <= add_ln19_4_reg_657_pp0_iter3_reg;
                add_ln19_4_reg_657_pp0_iter5_reg <= add_ln19_4_reg_657_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                    zext_ln12_reg_645_pp0_iter2_reg(5 downto 0) <= zext_ln12_reg_645(5 downto 0);
                    zext_ln12_reg_645_pp0_iter3_reg(5 downto 0) <= zext_ln12_reg_645_pp0_iter2_reg(5 downto 0);
                    zext_ln12_reg_645_pp0_iter4_reg(5 downto 0) <= zext_ln12_reg_645_pp0_iter3_reg(5 downto 0);
                    zext_ln17_1_reg_662_pp0_iter2_reg(11 downto 0) <= zext_ln17_1_reg_662(11 downto 0);
            end if;
        end if;
    end process;
    zext_ln12_reg_645(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln12_reg_645_pp0_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln12_reg_645_pp0_iter3_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln12_reg_645_pp0_iter4_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln17_1_reg_662(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln17_1_reg_662_pp0_iter2_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln12_1_fu_244_p2 <= std_logic_vector(unsigned(indvar_flatten79_fu_102) + unsigned(ap_const_lv18_1));
    add_ln12_fu_262_p2 <= std_logic_vector(unsigned(co_fu_98) + unsigned(ap_const_lv6_1));
    add_ln13_1_fu_464_p2 <= std_logic_vector(unsigned(indvar_flatten66_fu_94) + unsigned(ap_const_lv13_1));
    add_ln13_fu_308_p2 <= std_logic_vector(unsigned(select_ln12_fu_274_p3) + unsigned(ap_const_lv6_1));
    add_ln14_fu_458_p2 <= std_logic_vector(unsigned(select_ln13_fu_320_p3) + unsigned(ap_const_lv7_1));
    add_ln17_3_fu_447_p2 <= std_logic_vector(unsigned(add_ln17_fu_427_p2) + unsigned(zext_ln19_4_fu_433_p1));
    add_ln17_fu_427_p2 <= std_logic_vector(unsigned(tmp_70_fu_407_p3) + unsigned(zext_ln17_fu_423_p1));
    add_ln19_2_fu_375_p2 <= std_logic_vector(unsigned(add_ln19_fu_365_p2) + unsigned(zext_ln19_2_fu_371_p1));
    add_ln19_3_fu_401_p2 <= std_logic_vector(unsigned(tmp_fu_381_p3) + unsigned(zext_ln19_3_fu_397_p1));
    add_ln19_4_fu_441_p2 <= std_logic_vector(unsigned(add_ln19_3_fu_401_p2) + unsigned(zext_ln19_5_fu_437_p1));
    add_ln19_fu_365_p2 <= std_logic_vector(unsigned(zext_ln19_fu_349_p1) + unsigned(zext_ln19_1_fu_361_p1));
    and_ln12_fu_294_p2 <= (xor_ln12_fu_282_p2 and icmp_ln14_fu_288_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln12_fu_238_p2)
    begin
        if (((icmp_ln12_fu_238_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bias_buf1x1_address0 <= zext_ln12_reg_645_pp0_iter4_reg(6 - 1 downto 0);

    bias_buf1x1_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            bias_buf1x1_ce0 <= ap_const_logic_1;
        else 
            bias_buf1x1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_588_p2 <= (tmp_72_fu_533_p4 & ap_const_lv13_0);
    grp_fu_597_p2 <= (tmp_73_fu_551_p4 & ap_const_lv13_0);
    icmp_ln12_fu_238_p2 <= "1" when (indvar_flatten79_fu_102 = ap_const_lv18_25800) else "0";
    icmp_ln13_fu_268_p2 <= "1" when (indvar_flatten66_fu_94 = ap_const_lv13_C80) else "0";
    icmp_ln14_fu_288_p2 <= "1" when (w_fu_86 = ap_const_lv7_50) else "0";
    or_ln13_fu_314_p2 <= (icmp_ln13_fu_268_p2 or and_ln12_fu_294_p2);
    outBuffer1x1_address0 <= zext_ln19_6_fu_568_p1(18 - 1 downto 0);

    outBuffer1x1_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            outBuffer1x1_ce0 <= ap_const_logic_1;
        else 
            outBuffer1x1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outBuffer1x1_d0 <= std_logic_vector(unsigned(bias_buf1x1_q0) + unsigned(sum_fu_572_p4));

    outBuffer1x1_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            outBuffer1x1_we0 <= ap_const_logic_1;
        else 
            outBuffer1x1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    outBuffer3x3_0_address0 <= zext_ln17_1_reg_662_pp0_iter2_reg(12 - 1 downto 0);

    outBuffer3x3_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            outBuffer3x3_0_ce0 <= ap_const_logic_1;
        else 
            outBuffer3x3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outBuffer3x3_1_address0 <= zext_ln17_1_fu_453_p1(12 - 1 downto 0);

    outBuffer3x3_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outBuffer3x3_1_ce0 <= ap_const_logic_1;
        else 
            outBuffer3x3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outBuffer3x3_2_address0 <= zext_ln17_1_reg_662(12 - 1 downto 0);

    outBuffer3x3_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            outBuffer3x3_2_ce0 <= ap_const_logic_1;
        else 
            outBuffer3x3_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln12_1_fu_300_p3 <= 
        add_ln12_fu_262_p2 when (icmp_ln13_fu_268_p2(0) = '1') else 
        co_fu_98;
    select_ln12_fu_274_p3 <= 
        ap_const_lv6_0 when (icmp_ln13_fu_268_p2(0) = '1') else 
        h_fu_90;
    select_ln13_1_fu_328_p3 <= 
        add_ln13_fu_308_p2 when (and_ln12_fu_294_p2(0) = '1') else 
        select_ln12_fu_274_p3;
    select_ln13_2_fu_470_p3 <= 
        ap_const_lv13_1 when (icmp_ln13_fu_268_p2(0) = '1') else 
        add_ln13_1_fu_464_p2;
    select_ln13_fu_320_p3 <= 
        ap_const_lv7_0 when (or_ln13_fu_314_p2(0) = '1') else 
        w_fu_86;
    sum_fu_572_p1 <= grp_fu_597_p3;
    sum_fu_572_p4 <= sum_fu_572_p1(28 downto 13);
    tmp_63_fu_389_p3 <= (add_ln19_2_fu_375_p2 & ap_const_lv4_0);
    tmp_69_fu_353_p3 <= (select_ln12_1_fu_300_p3 & ap_const_lv3_0);
    tmp_70_fu_407_p3 <= (select_ln13_1_fu_328_p3 & ap_const_lv6_0);
    tmp_71_fu_415_p3 <= (select_ln13_1_fu_328_p3 & ap_const_lv4_0);
    tmp_72_fu_533_p4 <= mul_ln17_fu_527_p2(28 downto 13);
    tmp_73_fu_551_p1 <= grp_fu_588_p3;
    tmp_73_fu_551_p4 <= tmp_73_fu_551_p1(28 downto 13);
    tmp_fu_381_p3 <= (add_ln19_2_fu_375_p2 & ap_const_lv6_0);
    tmp_s_fu_341_p3 <= (select_ln12_1_fu_300_p3 & ap_const_lv5_0);
    weight_buf1x1_0_address0 <= zext_ln12_reg_645_pp0_iter2_reg(6 - 1 downto 0);

    weight_buf1x1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            weight_buf1x1_0_ce0 <= ap_const_logic_1;
        else 
            weight_buf1x1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf1x1_1_address0 <= zext_ln12_fu_336_p1(6 - 1 downto 0);

    weight_buf1x1_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weight_buf1x1_1_ce0 <= ap_const_logic_1;
        else 
            weight_buf1x1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf1x1_2_address0 <= zext_ln12_reg_645(6 - 1 downto 0);

    weight_buf1x1_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf1x1_2_ce0 <= ap_const_logic_1;
        else 
            weight_buf1x1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln12_fu_282_p2 <= (icmp_ln13_fu_268_p2 xor ap_const_lv1_1);
    zext_ln12_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_1_fu_300_p3),64));
    zext_ln17_1_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln17_3_fu_447_p2),64));
    zext_ln17_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_71_fu_415_p3),12));
    zext_ln19_1_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_fu_353_p3),12));
    zext_ln19_2_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_1_fu_328_p3),12));
    zext_ln19_3_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_389_p3),18));
    zext_ln19_4_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_fu_320_p3),12));
    zext_ln19_5_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_fu_320_p3),18));
    zext_ln19_6_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_4_reg_657_pp0_iter5_reg),64));
    zext_ln19_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_341_p3),12));
end behav;
