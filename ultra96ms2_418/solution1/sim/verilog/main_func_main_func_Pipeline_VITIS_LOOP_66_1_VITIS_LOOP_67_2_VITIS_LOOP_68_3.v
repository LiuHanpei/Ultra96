// ==============================================================
// Generated by Vitis HLS v2023.2.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module main_func_main_func_Pipeline_VITIS_LOOP_66_1_VITIS_LOOP_67_2_VITIS_LOOP_68_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_fm_AWVALID,
        m_axi_fm_AWREADY,
        m_axi_fm_AWADDR,
        m_axi_fm_AWID,
        m_axi_fm_AWLEN,
        m_axi_fm_AWSIZE,
        m_axi_fm_AWBURST,
        m_axi_fm_AWLOCK,
        m_axi_fm_AWCACHE,
        m_axi_fm_AWPROT,
        m_axi_fm_AWQOS,
        m_axi_fm_AWREGION,
        m_axi_fm_AWUSER,
        m_axi_fm_WVALID,
        m_axi_fm_WREADY,
        m_axi_fm_WDATA,
        m_axi_fm_WSTRB,
        m_axi_fm_WLAST,
        m_axi_fm_WID,
        m_axi_fm_WUSER,
        m_axi_fm_ARVALID,
        m_axi_fm_ARREADY,
        m_axi_fm_ARADDR,
        m_axi_fm_ARID,
        m_axi_fm_ARLEN,
        m_axi_fm_ARSIZE,
        m_axi_fm_ARBURST,
        m_axi_fm_ARLOCK,
        m_axi_fm_ARCACHE,
        m_axi_fm_ARPROT,
        m_axi_fm_ARQOS,
        m_axi_fm_ARREGION,
        m_axi_fm_ARUSER,
        m_axi_fm_RVALID,
        m_axi_fm_RREADY,
        m_axi_fm_RDATA,
        m_axi_fm_RLAST,
        m_axi_fm_RID,
        m_axi_fm_RFIFONUM,
        m_axi_fm_RUSER,
        m_axi_fm_RRESP,
        m_axi_fm_BVALID,
        m_axi_fm_BREADY,
        m_axi_fm_BRESP,
        m_axi_fm_BID,
        m_axi_fm_BUSER,
        zext_ln62_1,
        empty,
        output_feature_map,
        outBuffer1x1_address0,
        outBuffer1x1_ce0,
        outBuffer1x1_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_fm_AWVALID;
input   m_axi_fm_AWREADY;
output  [63:0] m_axi_fm_AWADDR;
output  [0:0] m_axi_fm_AWID;
output  [31:0] m_axi_fm_AWLEN;
output  [2:0] m_axi_fm_AWSIZE;
output  [1:0] m_axi_fm_AWBURST;
output  [1:0] m_axi_fm_AWLOCK;
output  [3:0] m_axi_fm_AWCACHE;
output  [2:0] m_axi_fm_AWPROT;
output  [3:0] m_axi_fm_AWQOS;
output  [3:0] m_axi_fm_AWREGION;
output  [0:0] m_axi_fm_AWUSER;
output   m_axi_fm_WVALID;
input   m_axi_fm_WREADY;
output  [15:0] m_axi_fm_WDATA;
output  [1:0] m_axi_fm_WSTRB;
output   m_axi_fm_WLAST;
output  [0:0] m_axi_fm_WID;
output  [0:0] m_axi_fm_WUSER;
output   m_axi_fm_ARVALID;
input   m_axi_fm_ARREADY;
output  [63:0] m_axi_fm_ARADDR;
output  [0:0] m_axi_fm_ARID;
output  [31:0] m_axi_fm_ARLEN;
output  [2:0] m_axi_fm_ARSIZE;
output  [1:0] m_axi_fm_ARBURST;
output  [1:0] m_axi_fm_ARLOCK;
output  [3:0] m_axi_fm_ARCACHE;
output  [2:0] m_axi_fm_ARPROT;
output  [3:0] m_axi_fm_ARQOS;
output  [3:0] m_axi_fm_ARREGION;
output  [0:0] m_axi_fm_ARUSER;
input   m_axi_fm_RVALID;
output   m_axi_fm_RREADY;
input  [15:0] m_axi_fm_RDATA;
input   m_axi_fm_RLAST;
input  [0:0] m_axi_fm_RID;
input  [9:0] m_axi_fm_RFIFONUM;
input  [0:0] m_axi_fm_RUSER;
input  [1:0] m_axi_fm_RRESP;
input   m_axi_fm_BVALID;
output   m_axi_fm_BREADY;
input  [1:0] m_axi_fm_BRESP;
input  [0:0] m_axi_fm_BID;
input  [0:0] m_axi_fm_BUSER;
input  [16:0] zext_ln62_1;
input  [1:0] empty;
input  [63:0] output_feature_map;
output  [17:0] outBuffer1x1_address0;
output   outBuffer1x1_ce0;
input  [15:0] outBuffer1x1_q0;

reg ap_idle;
reg m_axi_fm_AWVALID;
reg m_axi_fm_WVALID;
reg m_axi_fm_BREADY;
reg outBuffer1x1_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_idle_pp0;
reg   [0:0] or_ln67_reg_646;
reg    ap_block_state6_io;
reg   [0:0] icmp_ln68_1_reg_661;
reg   [0:0] icmp_ln68_1_reg_661_pp0_iter10_reg;
reg    ap_block_state12_pp0_stage0_iter11;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln66_fu_235_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    fm_blk_n_B;
wire    ap_block_pp0_stage0;
reg    fm_blk_n_W;
reg    fm_blk_n_AW;
reg   [0:0] first_iter_7_reg_187;
reg    ap_block_pp0_stage0_11001;
wire   [21:0] zext_ln62_1_cast_fu_200_p1;
reg   [21:0] zext_ln62_1_cast_reg_618;
reg   [0:0] icmp_ln66_reg_623;
reg   [0:0] icmp_ln66_reg_623_pp0_iter2_reg;
reg   [0:0] icmp_ln66_reg_623_pp0_iter3_reg;
reg   [0:0] icmp_ln66_reg_623_pp0_iter4_reg;
wire   [0:0] icmp_ln67_fu_256_p2;
reg   [0:0] icmp_ln67_reg_627;
reg   [0:0] icmp_ln67_reg_627_pp0_iter2_reg;
reg   [0:0] icmp_ln67_reg_627_pp0_iter3_reg;
wire   [5:0] select_ln66_1_fu_262_p3;
reg   [5:0] select_ln66_1_reg_635;
reg   [5:0] select_ln66_1_reg_635_pp0_iter2_reg;
reg   [5:0] select_ln66_1_reg_635_pp0_iter3_reg;
wire   [0:0] or_ln67_fu_344_p2;
reg   [63:0] fm_addr_reg_650;
wire   [0:0] icmp_ln68_1_fu_548_p2;
reg   [0:0] icmp_ln68_1_reg_661_pp0_iter5_reg;
reg   [0:0] icmp_ln68_1_reg_661_pp0_iter6_reg;
reg   [0:0] icmp_ln68_1_reg_661_pp0_iter7_reg;
reg   [0:0] icmp_ln68_1_reg_661_pp0_iter8_reg;
reg   [0:0] icmp_ln68_1_reg_661_pp0_iter9_reg;
reg   [15:0] outBuffer1x1_load_reg_665;
reg    ap_condition_exit_pp0_iter4_stage0;
reg   [0:0] ap_phi_mux_first_iter_7_phi_fu_192_p4;
wire    ap_loop_init;
wire   [63:0] zext_ln70_5_fu_537_p1;
wire  signed [63:0] sext_ln68_fu_453_p1;
reg    ap_block_pp0_stage0_01001;
reg   [6:0] w_fu_120;
wire   [6:0] add_ln68_fu_542_p2;
reg   [5:0] h_fu_124;
wire   [5:0] select_ln67_1_fu_363_p3;
reg   [12:0] indvar_flatten86_fu_128;
wire   [12:0] select_ln67_2_fu_280_p3;
reg   [5:0] c_fu_132;
reg   [17:0] indvar_flatten99_fu_136;
wire   [17:0] add_ln66_1_fu_241_p2;
wire   [5:0] add_ln66_fu_250_p2;
wire   [12:0] add_ln67_1_fu_274_p2;
wire   [0:0] icmp_ln68_fu_326_p2;
wire   [0:0] xor_ln66_fu_321_p2;
wire   [5:0] select_ln66_fu_309_p3;
wire   [0:0] and_ln66_fu_332_p2;
wire   [0:0] or_ln66_fu_316_p2;
wire   [0:0] or_ln67_1_fu_350_p2;
wire   [5:0] add_ln67_fu_338_p2;
wire   [21:0] grp_fu_564_p3;
wire   [13:0] tmp_s_fu_371_p4;
wire   [11:0] tmp_2_fu_390_p3;
wire   [13:0] tmp_3_fu_402_p3;
wire   [21:0] p_cast17_fu_398_p1;
wire   [21:0] tmp_1_fu_380_p5;
wire   [21:0] tmp7_fu_414_p2;
wire   [21:0] p_cast18_fu_410_p1;
wire   [21:0] empty_33_fu_420_p2;
wire   [22:0] tmp_4_fu_426_p3;
wire   [63:0] p_cast32_fu_434_p1;
wire   [63:0] empty_34_fu_438_p2;
wire   [62:0] trunc_ln9_fu_443_p4;
wire   [10:0] tmp_5_fu_463_p3;
wire   [8:0] tmp_6_fu_474_p3;
wire   [11:0] zext_ln70_fu_470_p1;
wire   [11:0] zext_ln70_1_fu_481_p1;
wire   [11:0] add_ln70_fu_485_p2;
wire   [11:0] zext_ln70_2_fu_491_p1;
wire   [11:0] add_ln70_1_fu_495_p2;
wire   [15:0] tmp_8_fu_509_p3;
wire   [17:0] tmp_7_fu_501_p3;
wire   [17:0] zext_ln70_3_fu_517_p1;
wire   [6:0] select_ln67_fu_355_p3;
wire   [17:0] add_ln70_2_fu_521_p2;
wire   [17:0] zext_ln70_4_fu_527_p1;
wire   [17:0] add_ln70_3_fu_531_p2;
wire   [5:0] grp_fu_564_p0;
wire   [15:0] grp_fu_564_p1;
wire   [16:0] grp_fu_564_p2;
reg    grp_fu_564_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [21:0] grp_fu_564_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 w_fu_120 = 7'd0;
#0 h_fu_124 = 6'd0;
#0 indvar_flatten86_fu_128 = 13'd0;
#0 c_fu_132 = 6'd0;
#0 indvar_flatten99_fu_136 = 18'd0;
#0 ap_done_reg = 1'b0;
end

main_func_mac_muladd_6ns_16ns_17ns_22_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 22 ))
mac_muladd_6ns_16ns_17ns_22_4_1_U170(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_564_p0),
    .din1(grp_fu_564_p1),
    .din2(grp_fu_564_p2),
    .ce(grp_fu_564_ce),
    .dout(grp_fu_564_p3)
);

main_func_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter4_stage0)) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            c_fu_132 <= 6'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln66_fu_235_p2 == 1'd0))) begin
            c_fu_132 <= select_ln66_1_fu_262_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        first_iter_7_reg_187 <= 1'd1;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln66_reg_623_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        first_iter_7_reg_187 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            h_fu_124 <= 6'd0;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln66_reg_623_pp0_iter3_reg == 1'd0))) begin
            h_fu_124 <= select_ln67_1_fu_363_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten86_fu_128 <= 13'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln66_fu_235_p2 == 1'd0))) begin
            indvar_flatten86_fu_128 <= select_ln67_2_fu_280_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten99_fu_136 <= 18'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln66_fu_235_p2 == 1'd0))) begin
            indvar_flatten99_fu_136 <= add_ln66_1_fu_241_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            w_fu_120 <= 7'd0;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln66_reg_623_pp0_iter3_reg == 1'd0))) begin
            w_fu_120 <= add_ln68_fu_542_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        fm_addr_reg_650 <= sext_ln68_fu_453_p1;
        icmp_ln66_reg_623_pp0_iter2_reg <= icmp_ln66_reg_623;
        icmp_ln66_reg_623_pp0_iter3_reg <= icmp_ln66_reg_623_pp0_iter2_reg;
        icmp_ln66_reg_623_pp0_iter4_reg <= icmp_ln66_reg_623_pp0_iter3_reg;
        icmp_ln67_reg_627_pp0_iter2_reg <= icmp_ln67_reg_627;
        icmp_ln67_reg_627_pp0_iter3_reg <= icmp_ln67_reg_627_pp0_iter2_reg;
        icmp_ln68_1_reg_661 <= icmp_ln68_1_fu_548_p2;
        icmp_ln68_1_reg_661_pp0_iter10_reg <= icmp_ln68_1_reg_661_pp0_iter9_reg;
        icmp_ln68_1_reg_661_pp0_iter5_reg <= icmp_ln68_1_reg_661;
        icmp_ln68_1_reg_661_pp0_iter6_reg <= icmp_ln68_1_reg_661_pp0_iter5_reg;
        icmp_ln68_1_reg_661_pp0_iter7_reg <= icmp_ln68_1_reg_661_pp0_iter6_reg;
        icmp_ln68_1_reg_661_pp0_iter8_reg <= icmp_ln68_1_reg_661_pp0_iter7_reg;
        icmp_ln68_1_reg_661_pp0_iter9_reg <= icmp_ln68_1_reg_661_pp0_iter8_reg;
        or_ln67_reg_646 <= or_ln67_fu_344_p2;
        outBuffer1x1_load_reg_665 <= outBuffer1x1_q0;
        select_ln66_1_reg_635_pp0_iter2_reg <= select_ln66_1_reg_635;
        select_ln66_1_reg_635_pp0_iter3_reg <= select_ln66_1_reg_635_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln66_reg_623 <= icmp_ln66_fu_235_p2;
        icmp_ln67_reg_627 <= icmp_ln67_fu_256_p2;
        select_ln66_1_reg_635 <= select_ln66_1_fu_262_p3;
        zext_ln62_1_cast_reg_618[16 : 0] <= zext_ln62_1_cast_fu_200_p1[16 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln66_fu_235_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln66_reg_623_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln66_reg_623_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_first_iter_7_phi_fu_192_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_7_phi_fu_192_p4 = first_iter_7_reg_187;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (or_ln67_reg_646 == 1'd1))) begin
        fm_blk_n_AW = m_axi_fm_AWREADY;
    end else begin
        fm_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln68_1_reg_661_pp0_iter10_reg == 1'd1))) begin
        fm_blk_n_B = m_axi_fm_BVALID;
    end else begin
        fm_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        fm_blk_n_W = m_axi_fm_WREADY;
    end else begin
        fm_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_564_ce = 1'b1;
    end else begin
        grp_fu_564_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln67_reg_646 == 1'd1))) begin
        m_axi_fm_AWVALID = 1'b1;
    end else begin
        m_axi_fm_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln68_1_reg_661_pp0_iter10_reg == 1'd1))) begin
        m_axi_fm_BREADY = 1'b1;
    end else begin
        m_axi_fm_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_fm_WVALID = 1'b1;
    end else begin
        m_axi_fm_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        outBuffer1x1_ce0 = 1'b1;
    end else begin
        outBuffer1x1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln66_1_fu_241_p2 = (indvar_flatten99_fu_136 + 18'd1);

assign add_ln66_fu_250_p2 = (c_fu_132 + 6'd1);

assign add_ln67_1_fu_274_p2 = (indvar_flatten86_fu_128 + 13'd1);

assign add_ln67_fu_338_p2 = (select_ln66_fu_309_p3 + 6'd1);

assign add_ln68_fu_542_p2 = (select_ln67_fu_355_p3 + 7'd1);

assign add_ln70_1_fu_495_p2 = (add_ln70_fu_485_p2 + zext_ln70_2_fu_491_p1);

assign add_ln70_2_fu_521_p2 = (tmp_7_fu_501_p3 + zext_ln70_3_fu_517_p1);

assign add_ln70_3_fu_531_p2 = (add_ln70_2_fu_521_p2 + zext_ln70_4_fu_527_p1);

assign add_ln70_fu_485_p2 = (zext_ln70_fu_470_p1 + zext_ln70_1_fu_481_p1);

assign and_ln66_fu_332_p2 = (xor_ln66_fu_321_p2 & icmp_ln68_fu_326_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage0_iter11));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage0_iter11)) | ((m_axi_fm_WREADY == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage0_iter11)) | ((m_axi_fm_WREADY == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_io)));
end

always @ (*) begin
    ap_block_state12_pp0_stage0_iter11 = ((icmp_ln68_1_reg_661_pp0_iter10_reg == 1'd1) & (m_axi_fm_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state6_io = ((m_axi_fm_AWREADY == 1'b0) & (or_ln67_reg_646 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_33_fu_420_p2 = (tmp7_fu_414_p2 + p_cast18_fu_410_p1);

assign empty_34_fu_438_p2 = (p_cast32_fu_434_p1 + output_feature_map);

assign grp_fu_564_p0 = grp_fu_564_p00;

assign grp_fu_564_p00 = select_ln66_1_fu_262_p3;

assign grp_fu_564_p1 = 22'd51200;

assign grp_fu_564_p2 = zext_ln62_1_cast_reg_618;

assign icmp_ln66_fu_235_p2 = ((indvar_flatten99_fu_136 == 18'd153600) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_256_p2 = ((indvar_flatten86_fu_128 == 13'd3200) ? 1'b1 : 1'b0);

assign icmp_ln68_1_fu_548_p2 = ((add_ln68_fu_542_p2 == 7'd80) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_326_p2 = ((w_fu_120 == 7'd80) ? 1'b1 : 1'b0);

assign m_axi_fm_ARADDR = 64'd0;

assign m_axi_fm_ARBURST = 2'd0;

assign m_axi_fm_ARCACHE = 4'd0;

assign m_axi_fm_ARID = 1'd0;

assign m_axi_fm_ARLEN = 32'd0;

assign m_axi_fm_ARLOCK = 2'd0;

assign m_axi_fm_ARPROT = 3'd0;

assign m_axi_fm_ARQOS = 4'd0;

assign m_axi_fm_ARREGION = 4'd0;

assign m_axi_fm_ARSIZE = 3'd0;

assign m_axi_fm_ARUSER = 1'd0;

assign m_axi_fm_ARVALID = 1'b0;

assign m_axi_fm_AWADDR = fm_addr_reg_650;

assign m_axi_fm_AWBURST = 2'd0;

assign m_axi_fm_AWCACHE = 4'd0;

assign m_axi_fm_AWID = 1'd0;

assign m_axi_fm_AWLEN = 32'd80;

assign m_axi_fm_AWLOCK = 2'd0;

assign m_axi_fm_AWPROT = 3'd0;

assign m_axi_fm_AWQOS = 4'd0;

assign m_axi_fm_AWREGION = 4'd0;

assign m_axi_fm_AWSIZE = 3'd0;

assign m_axi_fm_AWUSER = 1'd0;

assign m_axi_fm_RREADY = 1'b0;

assign m_axi_fm_WDATA = outBuffer1x1_load_reg_665;

assign m_axi_fm_WID = 1'd0;

assign m_axi_fm_WLAST = 1'b0;

assign m_axi_fm_WSTRB = 2'd3;

assign m_axi_fm_WUSER = 1'd0;

assign or_ln66_fu_316_p2 = (icmp_ln67_reg_627_pp0_iter3_reg | ap_phi_mux_first_iter_7_phi_fu_192_p4);

assign or_ln67_1_fu_350_p2 = (icmp_ln67_reg_627_pp0_iter3_reg | and_ln66_fu_332_p2);

assign or_ln67_fu_344_p2 = (or_ln66_fu_316_p2 | and_ln66_fu_332_p2);

assign outBuffer1x1_address0 = zext_ln70_5_fu_537_p1;

assign p_cast17_fu_398_p1 = tmp_2_fu_390_p3;

assign p_cast18_fu_410_p1 = tmp_3_fu_402_p3;

assign p_cast32_fu_434_p1 = tmp_4_fu_426_p3;

assign select_ln66_1_fu_262_p3 = ((icmp_ln67_fu_256_p2[0:0] == 1'b1) ? add_ln66_fu_250_p2 : c_fu_132);

assign select_ln66_fu_309_p3 = ((icmp_ln67_reg_627_pp0_iter3_reg[0:0] == 1'b1) ? 6'd0 : h_fu_124);

assign select_ln67_1_fu_363_p3 = ((and_ln66_fu_332_p2[0:0] == 1'b1) ? add_ln67_fu_338_p2 : select_ln66_fu_309_p3);

assign select_ln67_2_fu_280_p3 = ((icmp_ln67_fu_256_p2[0:0] == 1'b1) ? 13'd1 : add_ln67_1_fu_274_p2);

assign select_ln67_fu_355_p3 = ((or_ln67_1_fu_350_p2[0:0] == 1'b1) ? 7'd0 : w_fu_120);

assign sext_ln68_fu_453_p1 = $signed(trunc_ln9_fu_443_p4);

assign tmp7_fu_414_p2 = (p_cast17_fu_398_p1 + tmp_1_fu_380_p5);

assign tmp_1_fu_380_p5 = {{{{tmp_s_fu_371_p4}, {empty}}, {empty}}, {4'd0}};

assign tmp_2_fu_390_p3 = {{select_ln67_1_fu_363_p3}, {6'd0}};

assign tmp_3_fu_402_p3 = {{select_ln67_1_fu_363_p3}, {8'd0}};

assign tmp_4_fu_426_p3 = {{empty_33_fu_420_p2}, {1'd0}};

assign tmp_5_fu_463_p3 = {{select_ln66_1_reg_635_pp0_iter3_reg}, {5'd0}};

assign tmp_6_fu_474_p3 = {{select_ln66_1_reg_635_pp0_iter3_reg}, {3'd0}};

assign tmp_7_fu_501_p3 = {{add_ln70_1_fu_495_p2}, {6'd0}};

assign tmp_8_fu_509_p3 = {{add_ln70_1_fu_495_p2}, {4'd0}};

assign tmp_s_fu_371_p4 = {{grp_fu_564_p3[21:8]}};

assign trunc_ln9_fu_443_p4 = {{empty_34_fu_438_p2[63:1]}};

assign xor_ln66_fu_321_p2 = (icmp_ln67_reg_627_pp0_iter3_reg ^ 1'd1);

assign zext_ln62_1_cast_fu_200_p1 = zext_ln62_1;

assign zext_ln70_1_fu_481_p1 = tmp_6_fu_474_p3;

assign zext_ln70_2_fu_491_p1 = select_ln67_1_fu_363_p3;

assign zext_ln70_3_fu_517_p1 = tmp_8_fu_509_p3;

assign zext_ln70_4_fu_527_p1 = select_ln67_fu_355_p3;

assign zext_ln70_5_fu_537_p1 = add_ln70_3_fu_531_p2;

assign zext_ln70_fu_470_p1 = tmp_5_fu_463_p3;

always @ (posedge ap_clk) begin
    zext_ln62_1_cast_reg_618[21:17] <= 5'b00000;
end

endmodule //main_func_main_func_Pipeline_VITIS_LOOP_66_1_VITIS_LOOP_67_2_VITIS_LOOP_68_3
