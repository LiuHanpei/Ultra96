// ==============================================================
// Generated by Vitis HLS v2023.2.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module main_func_main_func_Pipeline_VITIS_LOOP_30_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RFIFONUM,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        sext_ln30,
        B_local_address0,
        B_local_ce0,
        B_local_q0,
        B_local_address1,
        B_local_ce1,
        B_local_q1,
        B_local_1_address0,
        B_local_1_ce0,
        B_local_1_q0,
        B_local_1_address1,
        B_local_1_ce1,
        B_local_1_q1,
        B_local_2_address0,
        B_local_2_ce0,
        B_local_2_q0,
        B_local_2_address1,
        B_local_2_ce1,
        B_local_2_q1,
        B_local_3_address0,
        B_local_3_ce0,
        B_local_3_q0,
        B_local_3_address1,
        B_local_3_ce1,
        B_local_3_q1,
        B_local_4_address0,
        B_local_4_ce0,
        B_local_4_q0,
        B_local_4_address1,
        B_local_4_ce1,
        B_local_4_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [63:0] m_axi_mem_AWADDR;
output  [0:0] m_axi_mem_AWID;
output  [31:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [0:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [255:0] m_axi_mem_WDATA;
output  [31:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [0:0] m_axi_mem_WID;
output  [0:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [63:0] m_axi_mem_ARADDR;
output  [0:0] m_axi_mem_ARID;
output  [31:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [0:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [255:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [0:0] m_axi_mem_RID;
input  [8:0] m_axi_mem_RFIFONUM;
input  [0:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [0:0] m_axi_mem_BID;
input  [0:0] m_axi_mem_BUSER;
input  [58:0] sext_ln30;
output  [3:0] B_local_address0;
output   B_local_ce0;
input  [15:0] B_local_q0;
output  [3:0] B_local_address1;
output   B_local_ce1;
input  [15:0] B_local_q1;
output  [3:0] B_local_1_address0;
output   B_local_1_ce0;
input  [15:0] B_local_1_q0;
output  [3:0] B_local_1_address1;
output   B_local_1_ce1;
input  [15:0] B_local_1_q1;
output  [3:0] B_local_2_address0;
output   B_local_2_ce0;
input  [15:0] B_local_2_q0;
output  [3:0] B_local_2_address1;
output   B_local_2_ce1;
input  [15:0] B_local_2_q1;
output  [3:0] B_local_3_address0;
output   B_local_3_ce0;
input  [15:0] B_local_3_q0;
output  [3:0] B_local_3_address1;
output   B_local_3_ce1;
input  [15:0] B_local_3_q1;
output  [3:0] B_local_4_address0;
output   B_local_4_ce0;
input  [15:0] B_local_4_q0;
output  [3:0] B_local_4_address1;
output   B_local_4_ce1;
input  [15:0] B_local_4_q1;

reg ap_idle;
reg m_axi_mem_WVALID;
reg B_local_ce0;
reg B_local_ce1;
reg B_local_1_ce0;
reg B_local_1_ce1;
reg B_local_2_ce0;
reg B_local_2_ce1;
reg B_local_3_ce0;
reg B_local_3_ce1;
reg B_local_4_ce0;
reg B_local_4_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln30_fu_259_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mem_blk_n_W;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] data2_fu_308_p4;
reg   [15:0] data2_reg_497;
reg   [15:0] B_local_1_load_reg_502;
reg   [15:0] B_local_2_load_reg_507;
reg   [15:0] B_local_3_load_reg_512;
reg   [15:0] B_local_4_load_reg_517;
reg   [15:0] B_local_load_1_reg_522;
reg   [15:0] B_local_1_load_1_reg_527;
reg   [15:0] B_local_2_load_1_reg_532;
reg   [15:0] B_local_3_load_1_reg_537;
reg   [15:0] B_local_4_load_1_reg_542;
wire   [63:0] zext_ln35_fu_279_p1;
wire   [63:0] zext_ln35_2_fu_294_p1;
wire    ap_block_pp0_stage0_01001;
reg   [2:0] k_fu_104;
wire   [2:0] add_ln30_fu_265_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_k_1;
wire   [3:0] shl_ln1_fu_271_p3;
wire   [3:0] or_ln35_fu_288_p2;
wire   [159:0] zext_ln35_1_fu_324_p1;
reg   [159:0] data2_1_fu_327_p5;
reg   [159:0] data2_2_fu_338_p5;
reg   [159:0] data2_3_fu_349_p5;
reg   [159:0] data2_4_fu_360_p5;
reg   [159:0] data2_5_fu_371_p5;
reg   [159:0] data2_6_fu_382_p5;
reg   [159:0] data2_7_fu_393_p5;
reg   [159:0] data2_8_fu_404_p5;
reg   [159:0] data2_9_fu_415_p5;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 k_fu_104 = 3'd0;
#0 ap_done_reg = 1'b0;
end

main_func_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln30_fu_259_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_fu_104 <= add_ln30_fu_265_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_104 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_local_1_load_1_reg_527 <= B_local_1_q0;
        B_local_1_load_reg_502 <= B_local_1_q1;
        B_local_2_load_1_reg_532 <= B_local_2_q0;
        B_local_2_load_reg_507 <= B_local_2_q1;
        B_local_3_load_1_reg_537 <= B_local_3_q0;
        B_local_3_load_reg_512 <= B_local_3_q1;
        B_local_4_load_1_reg_542 <= B_local_4_q0;
        B_local_4_load_reg_517 <= B_local_4_q1;
        B_local_load_1_reg_522 <= B_local_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        data2_reg_497 <= data2_fu_308_p4;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_local_1_ce0 = 1'b1;
    end else begin
        B_local_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_local_1_ce1 = 1'b1;
    end else begin
        B_local_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_local_2_ce0 = 1'b1;
    end else begin
        B_local_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_local_2_ce1 = 1'b1;
    end else begin
        B_local_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_local_3_ce0 = 1'b1;
    end else begin
        B_local_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_local_3_ce1 = 1'b1;
    end else begin
        B_local_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_local_4_ce0 = 1'b1;
    end else begin
        B_local_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_local_4_ce1 = 1'b1;
    end else begin
        B_local_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_local_ce0 = 1'b1;
    end else begin
        B_local_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_local_ce1 = 1'b1;
    end else begin
        B_local_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_259_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_k_1 = k_fu_104;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_mem_WVALID = 1'b1;
    end else begin
        m_axi_mem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mem_blk_n_W = m_axi_mem_WREADY;
    end else begin
        mem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_local_1_address0 = zext_ln35_2_fu_294_p1;

assign B_local_1_address1 = zext_ln35_fu_279_p1;

assign B_local_2_address0 = zext_ln35_2_fu_294_p1;

assign B_local_2_address1 = zext_ln35_fu_279_p1;

assign B_local_3_address0 = zext_ln35_2_fu_294_p1;

assign B_local_3_address1 = zext_ln35_fu_279_p1;

assign B_local_4_address0 = zext_ln35_2_fu_294_p1;

assign B_local_4_address1 = zext_ln35_fu_279_p1;

assign B_local_address0 = zext_ln35_2_fu_294_p1;

assign B_local_address1 = zext_ln35_fu_279_p1;

assign add_ln30_fu_265_p2 = (ap_sig_allocacmp_k_1 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_mem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_mem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

integer ap_tvar_int_0;

always @ (zext_ln35_1_fu_324_p1 or B_local_1_load_reg_502) begin
    for (ap_tvar_int_0 = 160 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 | ap_tvar_int_0 < 16) begin
            data2_1_fu_327_p5[ap_tvar_int_0] = zext_ln35_1_fu_324_p1[ap_tvar_int_0];
        end else if (31 - ap_tvar_int_0 >= 16) begin
            data2_1_fu_327_p5[ap_tvar_int_0] = 1'b0;
        end else begin
            data2_1_fu_327_p5[ap_tvar_int_0] = B_local_1_load_reg_502[31 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (data2_1_fu_327_p5 or B_local_2_load_reg_507) begin
    for (ap_tvar_int_1 = 160 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 47 | ap_tvar_int_1 < 32) begin
            data2_2_fu_338_p5[ap_tvar_int_1] = data2_1_fu_327_p5[ap_tvar_int_1];
        end else if (47 - ap_tvar_int_1 >= 16) begin
            data2_2_fu_338_p5[ap_tvar_int_1] = 1'b0;
        end else begin
            data2_2_fu_338_p5[ap_tvar_int_1] = B_local_2_load_reg_507[47 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (data2_2_fu_338_p5 or B_local_3_load_reg_512) begin
    for (ap_tvar_int_2 = 160 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 63 | ap_tvar_int_2 < 48) begin
            data2_3_fu_349_p5[ap_tvar_int_2] = data2_2_fu_338_p5[ap_tvar_int_2];
        end else if (63 - ap_tvar_int_2 >= 16) begin
            data2_3_fu_349_p5[ap_tvar_int_2] = 1'b0;
        end else begin
            data2_3_fu_349_p5[ap_tvar_int_2] = B_local_3_load_reg_512[63 - ap_tvar_int_2];
        end
    end
end

integer ap_tvar_int_3;

always @ (data2_3_fu_349_p5 or B_local_4_load_reg_517) begin
    for (ap_tvar_int_3 = 160 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 79 | ap_tvar_int_3 < 64) begin
            data2_4_fu_360_p5[ap_tvar_int_3] = data2_3_fu_349_p5[ap_tvar_int_3];
        end else if (79 - ap_tvar_int_3 >= 16) begin
            data2_4_fu_360_p5[ap_tvar_int_3] = 1'b0;
        end else begin
            data2_4_fu_360_p5[ap_tvar_int_3] = B_local_4_load_reg_517[79 - ap_tvar_int_3];
        end
    end
end

integer ap_tvar_int_4;

always @ (data2_4_fu_360_p5 or B_local_load_1_reg_522) begin
    for (ap_tvar_int_4 = 160 - 1; ap_tvar_int_4 >= 0; ap_tvar_int_4 = ap_tvar_int_4 - 1) begin
        if (ap_tvar_int_4 > 95 | ap_tvar_int_4 < 80) begin
            data2_5_fu_371_p5[ap_tvar_int_4] = data2_4_fu_360_p5[ap_tvar_int_4];
        end else if (95 - ap_tvar_int_4 >= 16) begin
            data2_5_fu_371_p5[ap_tvar_int_4] = 1'b0;
        end else begin
            data2_5_fu_371_p5[ap_tvar_int_4] = B_local_load_1_reg_522[95 - ap_tvar_int_4];
        end
    end
end

integer ap_tvar_int_5;

always @ (data2_5_fu_371_p5 or B_local_1_load_1_reg_527) begin
    for (ap_tvar_int_5 = 160 - 1; ap_tvar_int_5 >= 0; ap_tvar_int_5 = ap_tvar_int_5 - 1) begin
        if (ap_tvar_int_5 > 111 | ap_tvar_int_5 < 96) begin
            data2_6_fu_382_p5[ap_tvar_int_5] = data2_5_fu_371_p5[ap_tvar_int_5];
        end else if (111 - ap_tvar_int_5 >= 16) begin
            data2_6_fu_382_p5[ap_tvar_int_5] = 1'b0;
        end else begin
            data2_6_fu_382_p5[ap_tvar_int_5] = B_local_1_load_1_reg_527[111 - ap_tvar_int_5];
        end
    end
end

integer ap_tvar_int_6;

always @ (data2_6_fu_382_p5 or B_local_2_load_1_reg_532) begin
    for (ap_tvar_int_6 = 160 - 1; ap_tvar_int_6 >= 0; ap_tvar_int_6 = ap_tvar_int_6 - 1) begin
        if (ap_tvar_int_6 > 127 | ap_tvar_int_6 < 112) begin
            data2_7_fu_393_p5[ap_tvar_int_6] = data2_6_fu_382_p5[ap_tvar_int_6];
        end else if (127 - ap_tvar_int_6 >= 16) begin
            data2_7_fu_393_p5[ap_tvar_int_6] = 1'b0;
        end else begin
            data2_7_fu_393_p5[ap_tvar_int_6] = B_local_2_load_1_reg_532[127 - ap_tvar_int_6];
        end
    end
end

integer ap_tvar_int_7;

always @ (data2_7_fu_393_p5 or B_local_3_load_1_reg_537) begin
    for (ap_tvar_int_7 = 160 - 1; ap_tvar_int_7 >= 0; ap_tvar_int_7 = ap_tvar_int_7 - 1) begin
        if (ap_tvar_int_7 > 143 | ap_tvar_int_7 < 128) begin
            data2_8_fu_404_p5[ap_tvar_int_7] = data2_7_fu_393_p5[ap_tvar_int_7];
        end else if (143 - ap_tvar_int_7 >= 16) begin
            data2_8_fu_404_p5[ap_tvar_int_7] = 1'b0;
        end else begin
            data2_8_fu_404_p5[ap_tvar_int_7] = B_local_3_load_1_reg_537[143 - ap_tvar_int_7];
        end
    end
end

integer ap_tvar_int_8;

always @ (data2_8_fu_404_p5 or B_local_4_load_1_reg_542) begin
    for (ap_tvar_int_8 = 160 - 1; ap_tvar_int_8 >= 0; ap_tvar_int_8 = ap_tvar_int_8 - 1) begin
        if (ap_tvar_int_8 > 159 | ap_tvar_int_8 < 144) begin
            data2_9_fu_415_p5[ap_tvar_int_8] = data2_8_fu_404_p5[ap_tvar_int_8];
        end else if (159 - ap_tvar_int_8 >= 16) begin
            data2_9_fu_415_p5[ap_tvar_int_8] = 1'b0;
        end else begin
            data2_9_fu_415_p5[ap_tvar_int_8] = B_local_4_load_1_reg_542[159 - ap_tvar_int_8];
        end
    end
end

integer ap_tvar_int_9;

always @ (B_local_q1) begin
    for (ap_tvar_int_9 = 16 - 1; ap_tvar_int_9 >= 0; ap_tvar_int_9 = ap_tvar_int_9 - 1) begin
        if (ap_tvar_int_9 > 15 - 0) begin
            data2_fu_308_p4[ap_tvar_int_9] = 1'b0;
        end else begin
            data2_fu_308_p4[ap_tvar_int_9] = B_local_q1[15 - ap_tvar_int_9];
        end
    end
end

assign icmp_ln30_fu_259_p2 = ((ap_sig_allocacmp_k_1 == 3'd5) ? 1'b1 : 1'b0);

assign m_axi_mem_ARADDR = 64'd0;

assign m_axi_mem_ARBURST = 2'd0;

assign m_axi_mem_ARCACHE = 4'd0;

assign m_axi_mem_ARID = 1'd0;

assign m_axi_mem_ARLEN = 32'd0;

assign m_axi_mem_ARLOCK = 2'd0;

assign m_axi_mem_ARPROT = 3'd0;

assign m_axi_mem_ARQOS = 4'd0;

assign m_axi_mem_ARREGION = 4'd0;

assign m_axi_mem_ARSIZE = 3'd0;

assign m_axi_mem_ARUSER = 1'd0;

assign m_axi_mem_ARVALID = 1'b0;

assign m_axi_mem_AWADDR = 64'd0;

assign m_axi_mem_AWBURST = 2'd0;

assign m_axi_mem_AWCACHE = 4'd0;

assign m_axi_mem_AWID = 1'd0;

assign m_axi_mem_AWLEN = 32'd0;

assign m_axi_mem_AWLOCK = 2'd0;

assign m_axi_mem_AWPROT = 3'd0;

assign m_axi_mem_AWQOS = 4'd0;

assign m_axi_mem_AWREGION = 4'd0;

assign m_axi_mem_AWSIZE = 3'd0;

assign m_axi_mem_AWUSER = 1'd0;

assign m_axi_mem_AWVALID = 1'b0;

assign m_axi_mem_BREADY = 1'b0;

assign m_axi_mem_RREADY = 1'b0;

assign m_axi_mem_WDATA = data2_9_fu_415_p5;

assign m_axi_mem_WID = 1'd0;

assign m_axi_mem_WLAST = 1'b0;

assign m_axi_mem_WSTRB = 32'd1048575;

assign m_axi_mem_WUSER = 1'd0;

assign or_ln35_fu_288_p2 = (shl_ln1_fu_271_p3 | 4'd1);

assign shl_ln1_fu_271_p3 = {{ap_sig_allocacmp_k_1}, {1'd0}};

assign zext_ln35_1_fu_324_p1 = data2_reg_497;

assign zext_ln35_2_fu_294_p1 = or_ln35_fu_288_p2;

assign zext_ln35_fu_279_p1 = shl_ln1_fu_271_p3;

endmodule //main_func_main_func_Pipeline_VITIS_LOOP_30_4
